#version 460
#extension GL_EXT_debug_printf : enable

#define NUM_PRINTABLE_CHARS 95

struct GlyphLine {
	vec2 p1;
	vec2 p2;
};
struct GlyphOffset {
	uint offset;
	uint num_lines;
	vec2 padding;
};

layout(push_constant) uniform PushConstants {
	float glyph_width;
	float glyph_height;
	uint cell_width;
	uint cell_height;
} pc;

layout(binding = 0, r16ui) uniform writeonly uimage2D glyph_atlas;
layout(binding = 1) readonly buffer GlyphLines {
	GlyphLine data[];
} glyph_lines;
layout(binding = 2) readonly buffer GlyphOffsets {
	GlyphOffset data[];
} glyph_offsets;

layout (local_size_x = 1, local_size_y = 1) in;
void main() {
	uvec2 id = gl_GlobalInvocationID.xy;

	uint num_glyphs_per_row = uint(imageSize(glyph_atlas).x / pc.cell_width);
	if(id.x > pc.cell_width * num_glyphs_per_row) {
		return;
	}
	uint glyph_row_index = uint(id.x / pc.cell_width);
	uint glyph_col_index = uint(id.y / pc.cell_height);
	uint char_index = glyph_col_index * num_glyphs_per_row + glyph_row_index;
	if(char_index >= NUM_PRINTABLE_CHARS) {
		return;
	}

	vec2 pixel_top_left = {
		id.x - pc.cell_width * floor(id.x / pc.cell_width),
		id.y - pc.cell_height * floor(id.y / pc.cell_height)
	};

	uint result = 0;
	for(int i = 0; i < glyph_offsets.data[char_index].num_lines; ++i) {
		GlyphLine l = glyph_lines.data[glyph_offsets.data[char_index].offset + i];
		vec2 p1 = l.p1;
		vec2 p2 = l.p2;

		for(int y = 0; y < 2; ++y) {
            for(int x = 0; x < 8; ++x) {
                vec2 p = pixel_top_left + vec2(0.1111, 0.25) + vec2(0.1111, 0.5) * vec2(x, y);

                if(p.y < p2.y && p.y >= p1.y) {
                    float dx = p2.x - p1.x;
                    float dy = p2.y - p1.y;
                    if(dy == 0.0) {
                       continue;
                    }
                    float line_x = (p.y - p1.y) * (dx / dy) + p1.x;
                    if(p.x > line_x) {
                        uint mask = 1u << ((7u - x) + 8u * y);
                        result ^= mask;
                    }
                }
            }
		}
	}

	imageStore(glyph_atlas, ivec2(id.xy), uvec4(result));
}

